#include "header.h"

ODESolver *solver(Config &config)
{
  double dt = config.dt_init;
  
  const double reltol = 1e-4, abstol = 1e-4;
  switch (config.ode_solver_type)
    {
      // MFEM explicit methods
    case 1: ode_solver = new ForwardEulerSolver; break;
    case 2: ode_solver = new RK2Solver(0.5); break; // midpoint method
    case 3: ode_solver = new RK3SSPSolver; break;
    case 4: ode_solver = new RK4Solver; break;
      // MFEM implicit L-stable methods
    case 5: ode_solver = new BackwardEulerSolver; break;
    case 6: ode_solver = new SDIRK23Solver(2); break;
    case 7: ode_solver = new SDIRK33Solver; break;
      // CVODE
    case 8:
      cvode = new CVODESolver(MPI_COMM_WORLD, CV_ADAMS);
      cvode->Init(*oper);
      cvode->SetSStolerances(reltol, abstol);
      cvode->SetMaxStep(dt);
      ode_solver = cvode; break;
    case 9:
      cvode = new CVODESolver(MPI_COMM_WORLD, CV_BDF);
      cvode->Init(*oper);
      cvode->SetSStolerances(reltol, abstol);
      cvode->SetMaxStep(dt);
      ode_solver = cvode; break;
      // ARKODE
    case 11:
      arkode = new ARKStepSolver(MPI_COMM_WORLD, ARKStepSolver::EXPLICIT);
      arkode->Init(*oper);
      arkode->SetSStolerances(reltol, abstol);
      arkode->SetMaxStep(dt);
      if (config.ode_solver_type == 11) { arkode->SetERKTableNum(FEHLBERG_13_7_8); }
      ode_solver = arkode; break;
    case 12:
      arkode = new ARKStepSolver(MPI_COMM_WORLD, ARKStepSolver::IMPLICIT);
      arkode->Init(*oper);
      arkode->SetSStolerances(reltol, abstol);
      arkode->SetMaxStep(dt);
      ode_solver = arkode; break;
    default:
      cout << "Unknown ODE solver type: " << config.ode_solver_type << '\n'
	   << "Setting ODE to BackwardEulerSolver.\n";
      ode_solver = new BackwardEulerSolver; break;
    }
  
  // Initialize MFEM integrators, SUNDIALS integrators are initialized above
  if (config.ode_solver_type < 8)
    ode_solver->Init(*oper);
  
  // Since we want to update the diffusion coefficient after every time step,
  // we need to use the "one-step" mode of the SUNDIALS solvers.
  if (cvode) 
    cvode->SetStepMode(CV_ONE_STEP); 
  if (arkode)
    arkode->SetStepMode(ARK_ONE_STEP);
  
  return ode_solver;
}
